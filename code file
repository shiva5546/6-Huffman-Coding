#include <iostream>
#include <queue>
#include <unordered_map>
#include <vector>
#include <string>
using namespace std;

struct Node {
    char ch;
    int freq;
    Node *left, *right;
    Node(char c, int f) {
        ch = c;
        freq = f;
        left = right = nullptr;
    }
};

struct compare {
    bool operator()(Node* a, Node* b) {
        return a->freq > b->freq;
    }
};

Node* buildHuffmanTree(string S, vector<int> f) {
    priority_queue<Node*, vector<Node*>, compare> pq;
    for (int i = 0; i < S.size(); i++)
        pq.push(new Node(S[i], f[i]));
    while (pq.size() > 1) {
        Node* left = pq.top(); pq.pop();
        Node* right = pq.top(); pq.pop();
        Node* merged = new Node('$', left->freq + right->freq);
        merged->left = left;
        merged->right = right;
        pq.push(merged);
    }
    return pq.top();
}

void preorder(Node* root, string code, unordered_map<char, string>& codes) {
    if (!root) return;
    if (root->ch != '$')
        codes[root->ch] = code;
    preorder(root->left, code + "0", codes);
    preorder(root->right, code + "1", codes);
}

int main() {
    string S = "abcdef";
    vector<int> f = {5, 9, 12, 13, 16, 45};
    Node* root = buildHuffmanTree(S, f);
    unordered_map<char, string> codes;
    preorder(root, "", codes);
    vector<string> result;
    for (auto ch : S) result.push_back(codes[ch]);
    for (int i = 0; i < result.size(); i++)
        cout << result[i] << (i == result.size() - 1 ? "\n" : "   ");
    cout << "\nCharacter Codes:\n";
    for (auto ch : S)
        cout << ch << " : " << codes[ch] << endl;
    return 0;
}
